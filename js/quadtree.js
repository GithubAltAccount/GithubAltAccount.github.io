window.PointQuadTree=function(){"use strict";class t{constructor(t,s,i,h){this.x=t,this.y=s,this.w=i,this.h=h,this.points=[],this.children=null}containsPoint(t){return t.x>=this.x&&t.x<=this.x+this.w&&t.y>=this.y&&t.y<=this.y+this.h}overlaps(t){return t.x<this.x+this.w&&t.x+t.w>this.x&&t.y<this.y+this.h&&t.y+t.h>this.y}insert(t,s){if(null!=this.children){const i=t.x>this.x+this.w/2,h=t.y>this.y+this.h/2;this.children[i+2*h].insert(t,1.1*s)}else this.points.push(t),this.points.length>s&&this.w>1&&this.split(s)}some(s,i){if(null!=this.children)for(let t=0;t<this.children.length;++t){const h=this.children[t];if(h.overlaps(s)&&h.some(s,i))return!0}else for(let h=0;h<this.points.length;++h){const n=this.points[h];if(t.prototype.containsPoint.call(s,n)&&i(n))return!0}return!1}split(s){this.children=[];const i=this.w/2,h=this.h/2;for(let s=0;s<2;++s)for(let n=0;n<2;++n){const r=this.x+n*i,e=this.y+s*h;this.children.push(new t(r,e,i,h))}const n=this.points;this.points=[];const r=this.x+i,e=this.y+h;for(var o=0;o<n.length;++o){const t=n[o],i=t.x>r,h=t.y>e;this.children[i+2*h].insert(t,1.1*s)}}clear(){if(null!=this.children){for(let t=0;t<4;++t)this.children[t].clear();this.children.length=0,this.children=null}this.points.length=0,this.points=null}}return class{constructor(s,i,h,n,r){this.root=new t(s,i,h,n),this.maxPoints=r}clear(){this.root.clear()}insert(t){this.root.containsPoint(t)&&this.root.insert(t,this.maxPoints)}some(t,s){return this.root.some(t,s)}}}();